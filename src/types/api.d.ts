/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить пользователя по ID */
        get: operations["getById"];
        /** Обновить пользователя по ID */
        put: operations["update"];
        post?: never;
        /** Удалить пользователя по ID */
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-activity-assignment/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить назначение по ID */
        get: operations["getById_1"];
        /** Обновить назначение по ID */
        put: operations["update_1"];
        post?: never;
        /** Удалить назначение по ID */
        delete: operations["delete_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/round/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить раунд по ID */
        get: operations["getById_2"];
        /** Обновить раунд по ID */
        put: operations["update_2"];
        post?: never;
        /** Удалить раунд по ID */
        delete: operations["delete_2"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/participant/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить участника по ID */
        get: operations["getById_3"];
        /** Обновить участника по ID */
        put: operations["update_3"];
        post?: never;
        /** Удалить участника по ID */
        delete: operations["delete_3"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organization/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить организацию по ID */
        get: operations["getById_4"];
        /** Обновить организацию по ID */
        put: operations["update_4"];
        post?: never;
        /** Удалить организацию по ID */
        delete: operations["delete_4"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/occasion/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить мероприятие по ID */
        get: operations["getById_5"];
        /** Обновить мероприятие по ID */
        put: operations["update_5"];
        post?: never;
        /** Удалить мероприятие по ID */
        delete: operations["delete_5"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/milestone/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить веху по ID */
        get: operations["getById_6"];
        /** Обновить веху по ID */
        put: operations["update_6"];
        post?: never;
        /** Удалить веху по ID */
        delete: operations["delete_6"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/activity/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить активность по ID */
        get: operations["getById_7"];
        /** Обновить активность по ID */
        put: operations["update_7"];
        post?: never;
        /** Удалить активность по ID */
        delete: operations["delete_7"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить всех пользователей с пагинацией */
        get: operations["getAll"];
        put?: never;
        /** Создать нового пользователя */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{userId}/organizations/{orgId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Привязать организацию к пользователю */
        post: operations["addUserToOrganization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-activity-assignment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить все назначения */
        get: operations["getAll_1"];
        put?: never;
        /** Создать новое назначение */
        post: operations["create_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/round": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить все раунды с пагинацией */
        get: operations["getAll_2"];
        put?: never;
        /** Создать новый раунд */
        post: operations["create_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/participant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить всех участников с пагинацией */
        get: operations["getAll_3"];
        put?: never;
        /** Создать нового участника */
        post: operations["create_3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/participant/{participantId}/rounds/{roundId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Привязать участника к раунду */
        post: operations["addParticipantToRound"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить все организации с пагинацией */
        get: operations["getAll_4"];
        put?: never;
        /** Создать новую организацию */
        post: operations["create_4"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/occasion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить все мероприятия с пагинацией */
        get: operations["getAll_5"];
        put?: never;
        /** Создать новое мероприятие */
        post: operations["create_5"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/milestone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить все вехи с пагинацией */
        get: operations["getAll_6"];
        put?: never;
        /** Создать новую веху */
        post: operations["create_6"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Регистрация нового пользователя */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Восстановление пароля */
        post: operations["forgotPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить все активности с пагинацией */
        get: operations["getAll_7"];
        put?: never;
        /** Создать новую активность */
        post: operations["create_7"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Смена пароля */
        patch: operations["changePassword"];
        trace?: never;
    };
    "/api/v1/user-activity-assignment/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить назначения пользователя */
        get: operations["getByUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-activity-assignment/user/{userId}/activity/{activityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить назначение по ID пользователя и активности */
        get: operations["getByUserIdAndActivityId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-activity-assignment/role/{role}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить назначения по роли */
        get: operations["getByRole"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-activity-assignment/activity/{activityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить назначения активности */
        get: operations["getByActivityId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-activity-assignment/activity/{activityId}/role/{role}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить назначения активности по роли */
        get: operations["getByActivityIdAndRole"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/occasion/{id}/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить статистику активностей мероприятия */
        get: operations["getStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/activity/occasion/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить активности по ID мероприятия */
        get: operations["getByOccasionId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Запрос на обновление пользователя */
        UpdateUserRequest: {
            /**
             * @description Имя
             * @example Иван
             */
            name?: string;
            /**
             * @description Фамилия
             * @example Иванов
             */
            surname?: string;
            /**
             * @description Отчество
             * @example Иванович
             */
            secondName?: string;
            /**
             * @description Email
             * @example ivan@example.com
             */
            email?: string;
            /**
             * @description Номер телефона
             * @example +7 777 123 45 67
             */
            phoneNumber?: string;
            /**
             * @description Статус пользователя
             * @example ACTIVE
             */
            status?: string;
            /** @description ID организации */
            organizationIds?: number[];
            /** @description Список ролей */
            roles?: ("SUPERADMIN" | "ADMIN" | "OCCASION_ADMIN" | "USER" | "READER")[];
        };
        /** @description Список организаций пользователя */
        EntityLinkDto: {
            /**
             * Format: int64
             * @description Id сущности БД
             * @example 3
             */
            id?: number;
            /**
             * @description Отображаемое поле
             * @example SBF
             */
            value?: string;
        };
        /** @description Личная информация */
        PersonDto: {
            /**
             * @description Имя
             * @example Иван
             */
            name?: string;
            /**
             * @description Фамилия
             * @example Иванов
             */
            surname?: string;
            /**
             * @description Отчество
             * @example Иванович
             */
            secondName?: string;
            /**
             * @description Электронная почта
             * @example ivan.ivanov@example.com
             */
            email?: string;
            /**
             * @description Номер телефона
             * @example +7 777 123-45-67
             */
            phoneNumber?: string;
        };
        /** @description Пользователь системы */
        UserDto: {
            /**
             * Format: int64
             * @description Id в БД
             * @example 5
             */
            readonly id?: number;
            /**
             * @description Имя пользователя (уникальное)
             * @example john_doe
             */
            username?: string;
            /**
             * @description Пароль
             * @example password
             */
            password?: string;
            /**
             * @description Статус пользователя
             * @example ACTIVE
             */
            status?: string;
            person?: components["schemas"]["PersonDto"];
            /** @description Список организаций пользователя */
            organizations?: components["schemas"]["EntityLinkDto"][];
            /** @description Список ролей пользователя */
            roles?: ("SUPERADMIN" | "ADMIN" | "OCCASION_ADMIN" | "USER" | "READER")[];
        };
        /** @description Запрос на обновление назначения пользователя на активность */
        UpdateUserActivityAssignmentRequest: {
            /**
             * Format: int64
             * @description ID пользователя
             * @example 1
             */
            userId?: number;
            /**
             * Format: int64
             * @description ID активности
             * @example 1
             */
            activityId?: number;
            /**
             * @description Роль пользователя в активности
             * @example JUDGE_CHIEF
             * @enum {string}
             */
            role?: "JUDGE_CHIEF" | "JUDGE" | "PARTICIPANT" | "ORGANIZER" | "OBSERVER";
        };
        /** @description Назначение пользователя на активность с ролью */
        UserActivityAssignmentDto: {
            /**
             * Format: int64
             * @description Id в БД
             * @example 5
             */
            readonly id?: number;
            user?: components["schemas"]["EntityLinkDto"];
            activity?: components["schemas"]["EntityLinkDto"];
            /**
             * @description Роль пользователя в активности
             * @example JUDGE_CHIEF
             * @enum {string}
             */
            role?: "JUDGE_CHIEF" | "JUDGE" | "PARTICIPANT" | "ORGANIZER" | "OBSERVER";
            /**
             * Format: date-time
             * @description Дата назначения
             */
            assignedAt?: string;
            /** @description Имя пользователя */
            userName?: string;
            /** @description Фамилия пользователя */
            userSurname?: string;
            /** @description Отчество пользователя */
            userSecondName?: string;
        };
        /** @description Запрос на обновление раунда */
        UpdateRoundRequest: {
            /**
             * @description Название раунда
             * @example Первый раунд
             */
            name?: string;
            /**
             * @description Описание раунда
             * @example Квалификационный раунд
             */
            description?: string;
            /**
             * Format: int64
             * @description ID вехи, частью которой является раунд
             */
            milestoneId?: number;
            /** @description Список ID участников */
            participantIds?: number[];
            /**
             * @description Статус раунда
             * @example DRAFT
             * @enum {string}
             */
            status?: "DRAFT" | "READY" | "ACTIVE" | "COMPLETED";
        };
        /** @description Раунд в рамках активности/соревнования */
        RoundDto: {
            /**
             * Format: int64
             * @description Id в БД
             * @example 5
             */
            readonly id?: number;
            /**
             * @description Название раунда
             * @example Групповой этап
             */
            name?: string;
            /**
             * @description Описание раунда
             * @example Матчи по круговой системе
             */
            description?: string;
            activity?: components["schemas"]["EntityLinkDto"];
            milestone?: components["schemas"]["EntityLinkDto"];
            /** @description Список участников раунда */
            participants?: components["schemas"]["EntityLinkDto"][];
            /**
             * @description Статус раунда
             * @example DRAFT
             * @enum {string}
             */
            status?: "DRAFT" | "READY" | "ACTIVE" | "COMPLETED";
        };
        /** @description Запрос на обновление участника */
        UpdateParticipantRequest: {
            /**
             * @description Имя
             * @example Иван
             */
            name?: string;
            /**
             * @description Фамилия
             * @example Иванов
             */
            surname?: string;
            /**
             * @description Отчество
             * @example Иванович
             */
            secondName?: string;
            /**
             * @description Email
             * @example ivan@example.com
             */
            email?: string;
            /**
             * @description Номер телефона
             * @example +7 777 123 45 67
             */
            phoneNumber?: string;
            /**
             * @description Стартовый номер участника
             * @example A-102
             */
            number?: string;
        };
        /** @description Участник активности */
        ParticipantDto: {
            /**
             * Format: int64
             * @description Id в БД
             * @example 5
             */
            readonly id?: number;
            person?: components["schemas"]["PersonDto"];
            /**
             * @description Стартовый номер участника
             * @example A-102
             */
            number?: string;
            activity?: components["schemas"]["EntityLinkDto"];
            /** @description Список этапов */
            milestones?: components["schemas"]["EntityLinkDto"][];
            /** @description Список раундов участника */
            rounds?: components["schemas"]["EntityLinkDto"][];
        };
        /** @description Адрес организации */
        AddressDto: {
            /**
             * @description Страна
             * @example Казахстан
             */
            country?: string;
            /**
             * @description Город
             * @example Алматы
             */
            city?: string;
            /**
             * @description Улица
             * @example Абая
             */
            streetName?: string;
            /**
             * @description Номер дома
             * @example 10А
             */
            streetNumber?: string;
            /**
             * @description Комментарий к адресу
             * @example Вход со двора
             */
            comment?: string;
        };
        /** @description Запрос на обновление организации */
        UpdateOrganizationRequest: {
            /**
             * @description Название организации
             * @example Sense
             */
            name?: string;
            /**
             * @description Описание организации
             * @example Организация, проводящая турниры и события
             */
            description?: string;
            /**
             * @description Контактный номер телефона
             * @example +7 777 123 45 67
             */
            phoneNumber?: string;
            /**
             * @description Электронная почта
             * @example info@sense.kz
             */
            email?: string;
            address?: components["schemas"]["AddressDto"];
        };
        /** @description Организация (владелец/проводящая сторона мероприятия) */
        OrganizationDto: {
            /**
             * Format: int64
             * @description Id в БД
             * @example 5
             */
            readonly id?: number;
            /**
             * @description Название организации
             * @example Sense
             */
            name?: string;
            /**
             * @description Описание организации
             * @example Организация, проводящая турниры и события
             */
            description?: string;
            /**
             * @description Контактный номер телефона
             * @example +7 777 123 45 67
             */
            phoneNumber?: string;
            /**
             * @description Электронная почта
             * @example info@sense.kz
             */
            email?: string;
            address?: components["schemas"]["AddressDto"];
            /** @description Список связанных юзеров */
            users?: components["schemas"]["EntityLinkDto"][];
        };
        /** @description Запрос на обновление мероприятия */
        UpdateOccasionRequest: {
            /**
             * @description Название мероприятия
             * @example SBF
             */
            name?: string;
            /**
             * @description Описание мероприятия
             * @example Весенний фестиваль боевых искусств
             */
            description?: string;
            /**
             * Format: date-time
             * @description Дата начала
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Дата окончания
             */
            endDate?: string;
            /**
             * Format: int64
             * @description ID организации, проводящей мероприятие
             */
            organizationId?: number;
            /**
             * @description Статус мероприятия
             * @example DRAFT
             * @enum {string}
             */
            status?: "DRAFT" | "READY" | "ACTIVE" | "COMPLETED";
        };
        /** @description Мероприятие (высокоуровневое событие, содержащее активности) */
        OccasionDto: {
            /**
             * Format: int64
             * @description Id в БД
             * @example 5
             */
            readonly id?: number;
            /**
             * @description Название мероприятия
             * @example SBF
             */
            name?: string;
            /**
             * @description Описание мероприятия
             * @example Весенний фестиваль боевых искусств
             */
            description?: string;
            /**
             * Format: date-time
             * @description Дата начала
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Дата окончания
             */
            endDate?: string;
            organization?: components["schemas"]["EntityLinkDto"];
            /**
             * @description Статус мероприятия
             * @example DRAFT
             * @enum {string}
             */
            status?: "DRAFT" | "READY" | "ACTIVE" | "COMPLETED";
        };
        /** @description Запрос на обновление вехи */
        UpdateMilestoneRequest: {
            /**
             * @description Название вехи
             * @example Квалификация
             */
            name?: string;
            /**
             * Format: int64
             * @description ID активности, частью которой является веха
             */
            activityId?: number;
            /**
             * @description Статус вехи
             * @example DRAFT
             * @enum {string}
             */
            status?: "DRAFT" | "READY" | "ACTIVE" | "COMPLETED";
        };
        /** @description Веха (логический этап в рамках активности) */
        MilestoneDto: {
            /**
             * Format: int64
             * @description Id в БД
             * @example 5
             */
            readonly id?: number;
            /**
             * @description Название вехи
             * @example Квалификация
             */
            name?: string;
            activity?: components["schemas"]["EntityLinkDto"];
            /** @description Список раундов */
            rounds?: components["schemas"]["EntityLinkDto"][];
            /**
             * @description Статус вехи
             * @example DRAFT
             * @enum {string}
             */
            status?: "DRAFT" | "READY" | "ACTIVE" | "COMPLETED";
        };
        /** @description Запрос на обновление активности */
        UpdateActivityRequest: {
            /**
             * @description Название активности
             * @example Открытие турнира
             */
            name?: string;
            /**
             * @description Описание активности
             * @example Церемония открытия, приветственное слово организаторов
             */
            description?: string;
            /**
             * Format: date-time
             * @description Дата и время начала
             */
            startDateTime?: string;
            /**
             * Format: date-time
             * @description Дата и время окончания
             */
            endDateTime?: string;
            address?: components["schemas"]["AddressDto"];
            /**
             * Format: int64
             * @description ID мероприятия, частью которого является активность
             */
            occasionId?: number;
            /**
             * @description Статус активности
             * @example DRAFT
             * @enum {string}
             */
            status?: "DRAFT" | "READY" | "ACTIVE" | "COMPLETED";
        };
        /** @description Активность (событие в рамках мероприятия) */
        ActivityDto: {
            /**
             * Format: int64
             * @description Id в БД
             * @example 5
             */
            readonly id?: number;
            /**
             * @description Название активности
             * @example Открытие турнира
             */
            name: string;
            /**
             * @description Описание активности
             * @example Церемония открытия, приветственное слово организаторов
             */
            description?: string;
            /**
             * Format: date-time
             * @description Дата и время начала
             */
            startDateTime?: string;
            /**
             * Format: date-time
             * @description Дата и время окончания
             */
            endDateTime?: string;
            address?: components["schemas"]["AddressDto"];
            occasion?: components["schemas"]["EntityLinkDto"];
            /** @description Список этапов */
            milestones?: components["schemas"]["EntityLinkDto"][];
            /**
             * @description Статус активности
             * @example DRAFT
             * @enum {string}
             */
            status?: "DRAFT" | "READY" | "ACTIVE" | "COMPLETED";
        };
        /** @description Запрос на создание пользователя */
        CreateUserRequest: {
            /**
             * @description Имя пользователя (уникальное)
             * @example john_doe
             */
            username: string;
            /**
             * @description Пароль
             * @example password123
             */
            password: string;
            /**
             * @description Имя
             * @example Иван
             */
            name: string;
            /**
             * @description Фамилия
             * @example Иванов
             */
            surname: string;
            /**
             * @description Отчество
             * @example Иванович
             */
            secondName?: string;
            /**
             * @description Email
             * @example ivan@example.com
             */
            email?: string;
            /**
             * @description Номер телефона
             * @example +7 777 123 45 67
             */
            phoneNumber?: string;
            /**
             * @description Статус пользователя
             * @example ACTIVE
             */
            status: string;
            /** @description ID организации */
            organizationIds?: number[];
            /** @description Список ролей */
            roles?: ("SUPERADMIN" | "ADMIN" | "OCCASION_ADMIN" | "USER" | "READER")[];
        };
        /** @description Запрос на создание назначения пользователя на активность */
        CreateUserActivityAssignmentRequest: {
            /**
             * Format: int64
             * @description ID пользователя
             * @example 1
             */
            userId: number;
            /**
             * Format: int64
             * @description ID активности
             * @example 1
             */
            activityId: number;
            /**
             * @description Роль пользователя в активности
             * @example JUDGE_CHIEF
             * @enum {string}
             */
            role: "JUDGE_CHIEF" | "JUDGE" | "PARTICIPANT" | "ORGANIZER" | "OBSERVER";
        };
        /** @description Запрос на создание раунда */
        CreateRoundRequest: {
            /**
             * @description Название раунда
             * @example Первый раунд
             */
            name: string;
            /**
             * @description Описание раунда
             * @example Квалификационный раунд
             */
            description?: string;
            /**
             * Format: int64
             * @description ID этапа, частью которой является раунд
             */
            milestoneId: number;
            /**
             * @description Статус раунда
             * @example DRAFT
             * @enum {string}
             */
            status: "DRAFT" | "READY" | "ACTIVE" | "COMPLETED";
        };
        /** @description Запрос на создание участника */
        CreateParticipantRequest: {
            /**
             * @description Имя
             * @example Иван
             */
            name: string;
            /**
             * @description Фамилия
             * @example Иванов
             */
            surname: string;
            /**
             * @description Отчество
             * @example Иванович
             */
            secondName?: string;
            /**
             * @description Email
             * @example ivan@example.com
             */
            email?: string;
            /**
             * @description Номер телефона
             * @example +7 777 123 45 67
             */
            phoneNumber?: string;
            /**
             * @description Стартовый номер участника
             * @example A-102
             */
            number?: string;
        };
        /** @description Запрос на создание организации */
        CreateOrganizationRequest: {
            /**
             * @description Название организации
             * @example Sense
             */
            name: string;
            /**
             * @description Описание организации
             * @example Организация, проводящая турниры и события
             */
            description?: string;
            /**
             * @description Контактный номер телефона
             * @example +7 777 123 45 67
             */
            phoneNumber?: string;
            /**
             * @description Электронная почта
             * @example info@sense.kz
             */
            email?: string;
            address?: components["schemas"]["AddressDto"];
        };
        /** @description Запрос на создание мероприятия */
        CreateOccasionRequest: {
            /**
             * @description Название мероприятия
             * @example SBF
             */
            name: string;
            /**
             * @description Описание мероприятия
             * @example Весенний фестиваль боевых искусств
             */
            description?: string;
            /**
             * Format: date-time
             * @description Дата начала
             */
            startDate: string;
            /**
             * Format: date-time
             * @description Дата окончания
             */
            endDate: string;
            /**
             * Format: int64
             * @description ID организации, проводящей мероприятие
             */
            organizationId?: number;
            /**
             * @description Статус мероприятия
             * @example DRAFT
             * @enum {string}
             */
            status: "DRAFT" | "READY" | "ACTIVE" | "COMPLETED";
        };
        /** @description Запрос на создание вехи */
        CreateMilestoneRequest: {
            /**
             * @description Название вехи
             * @example Квалификация
             */
            name: string;
            /**
             * Format: int64
             * @description ID активности, частью которой является веха
             */
            activityId?: number;
            /**
             * @description Статус вехи
             * @example DRAFT
             * @enum {string}
             */
            status: "DRAFT" | "READY" | "ACTIVE" | "COMPLETED";
        };
        RegistrationRequest: {
            /**
             * @description Логин
             * @example john_doe
             */
            username: string;
            /**
             * @description Пароль
             * @example P@ssw0rd!
             */
            password: string;
            /**
             * @description Имя
             * @example John
             */
            name: string;
            /**
             * @description Фамилия
             * @example Иванов
             */
            surname?: string;
            /**
             * @description Отчество
             * @example Иванович
             */
            secondName?: string;
            /**
             * @description Имейл
             * @example john@example.com
             */
            email?: string;
            /**
             * @description Номер телефона
             * @example +7 777 123-45-67
             */
            phoneNumber?: string;
        };
        ForgotPasswordRequest: {
            /**
             * @description Email address of the user (optional)
             * @example john.doe@example.com
             */
            email?: string;
            /**
             * @description Username of the user (optional)
             * @example john_doe
             */
            username?: string;
        };
        /** @description Запрос на создание активности */
        CreateActivityRequest: {
            /**
             * @description Название активности
             * @example Открытие турнира
             */
            name: string;
            /**
             * @description Описание активности
             * @example Церемония открытия, приветственное слово организаторов
             */
            description?: string;
            /**
             * Format: date-time
             * @description Дата и время начала
             */
            startDateTime: string;
            /**
             * Format: date-time
             * @description Дата и время окончания
             */
            endDateTime?: string;
            address?: components["schemas"]["AddressDto"];
            /**
             * Format: int64
             * @description ID мероприятия, частью которого является активность
             */
            occasionId: number;
            /**
             * @description Статус активности
             * @example DRAFT
             * @enum {string}
             */
            status: "DRAFT" | "READY" | "ACTIVE" | "COMPLETED";
        };
        ChangePasswordRequest: {
            /** @description Current password */
            current_password: string;
            /** @description New password */
            new_password: string;
            /** @description New password confirmation */
            confirm_password: string;
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        PageUserDto: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["UserDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            pageNumber?: number;
            paged?: boolean;
            unpaged?: boolean;
        };
        SortObject: {
            empty?: boolean;
            sorted?: boolean;
            unsorted?: boolean;
        };
        PageUserActivityAssignmentDto: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["UserActivityAssignmentDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        PageRoundDto: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["RoundDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        PageParticipantDto: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["ParticipantDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        PageOrganizationDto: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["OrganizationDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        PageMetadata: {
            /** Format: int64 */
            size?: number;
            /** Format: int64 */
            number?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int64 */
            totalPages?: number;
        };
        PagedModel: {
            content?: Record<string, never>[];
            page?: components["schemas"]["PageMetadata"];
        };
        PageOccasionDto: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["OccasionDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        /** @description Статистика активностей мероприятия */
        OccasionStatisticsDto: {
            /**
             * Format: int64
             * @description ID мероприятия
             * @example 1
             */
            occasionId?: number;
            /**
             * @description Название мероприятия
             * @example SBF
             */
            occasionName?: string;
            /**
             * Format: int64
             * @description Количество активностей в состоянии 'Completed'
             * @example 5
             */
            completedActivitiesCount?: number;
            /**
             * Format: int64
             * @description Количество активностей в активном состоянии (не Cancelled, Completed, Draft)
             * @example 3
             */
            activeActivitiesCount?: number;
            /**
             * Format: int64
             * @description Общее количество активностей в мероприятии
             * @example 8
             */
            totalActivitiesCount?: number;
        };
        PageMilestoneDto: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["MilestoneDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        PageActivityDto: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["ActivityDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserDto"];
                };
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getById_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    update_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserActivityAssignmentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserActivityAssignmentDto"];
                };
            };
        };
    };
    delete_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getById_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    update_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRoundRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RoundDto"];
                };
            };
        };
    };
    delete_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getById_3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    update_3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateParticipantRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantDto"];
                };
            };
        };
    };
    delete_3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getById_4: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    update_4: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrganizationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OrganizationDto"];
                };
            };
        };
    };
    delete_4: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getById_5: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    update_5: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOccasionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OccasionDto"];
                };
            };
        };
    };
    delete_5: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getById_6: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    update_6: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMilestoneRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MilestoneDto"];
                };
            };
        };
    };
    delete_6: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getById_7: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    update_7: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateActivityRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ActivityDto"];
                };
            };
        };
    };
    delete_7: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAll: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageUserDto"];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserDto"];
                };
            };
        };
    };
    addUserToOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
                orgId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserDto"];
                };
            };
        };
    };
    getAll_1: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageUserActivityAssignmentDto"];
                };
            };
        };
    };
    create_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserActivityAssignmentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserActivityAssignmentDto"];
                };
            };
        };
    };
    getAll_2: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageRoundDto"];
                };
            };
        };
    };
    create_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRoundRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RoundDto"];
                };
            };
        };
    };
    getAll_3: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageParticipantDto"];
                };
            };
        };
    };
    create_3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateParticipantRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantDto"];
                };
            };
        };
    };
    addParticipantToRound: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                participantId: number;
                roundId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantDto"];
                };
            };
        };
    };
    getAll_4: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageOrganizationDto"];
                };
            };
        };
    };
    create_4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrganizationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OrganizationDto"];
                };
            };
        };
    };
    getAll_5: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved all occasions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PagedModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageOccasionDto"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageOccasionDto"];
                };
            };
        };
    };
    create_5: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOccasionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OccasionDto"];
                };
            };
        };
    };
    getAll_6: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageMilestoneDto"];
                };
            };
        };
    };
    create_6: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMilestoneRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MilestoneDto"];
                };
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegistrationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserDto"];
                };
            };
        };
    };
    forgotPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForgotPasswordRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getAll_7: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageActivityDto"];
                };
            };
        };
    };
    create_7: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateActivityRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ActivityDto"];
                };
            };
        };
    };
    changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getByUserId: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageUserActivityAssignmentDto"];
                };
            };
        };
    };
    getByUserIdAndActivityId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
                activityId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserActivityAssignmentDto"];
                };
            };
        };
    };
    getByRole: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                role: "JUDGE_CHIEF" | "JUDGE" | "PARTICIPANT" | "ORGANIZER" | "OBSERVER";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageUserActivityAssignmentDto"];
                };
            };
        };
    };
    getByActivityId: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                activityId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageUserActivityAssignmentDto"];
                };
            };
        };
    };
    getByActivityIdAndRole: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                activityId: number;
                role: "JUDGE_CHIEF" | "JUDGE" | "PARTICIPANT" | "ORGANIZER" | "OBSERVER";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageUserActivityAssignmentDto"];
                };
            };
        };
    };
    getStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OccasionStatisticsDto"];
                };
            };
        };
    };
    getByOccasionId: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageActivityDto"];
                };
            };
        };
    };
}
